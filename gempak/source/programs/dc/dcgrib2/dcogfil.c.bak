#include <stdio.h>
#include <string.h>

#include <gbcmn.h>
#include <uscore.h>

#include "mkdirs_open.h"
#include "dcsgrid.h"

#ifdef UNDERSCORE
#define fl_inqr	fl_inqr_
#define	gd_clos	gd_clos_
#define gd_cref	gd_cref_
#define gd_opnr	gd_opnr_
#define gr_cnav	gr_cnav_
#define gr_mnav	gr_mnav_
#define open_gem_grid open_gem_grid_
#endif

void dcogfil(filnam,iflno,maxgrid,specgrid)
char *filnam;
int *iflno,maxgrid,specgrid;
{
char *dirp,stripped[PATH_MAX],newfil[PATH_MAX],errstr[128];
int dirlen,ier,loglev,numerr,imax,i;

int nx,ny;
float lon1,lon2,lat1,lat2;
float ang1,ang2,ang3;
int angflg,exist,gsflag;
float rnvblk[256],envblk[256],anlblk[128];
int navsz, anlsz, hdrsz;

mode_t dirmode=S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH;
static char oldfil[132]="\0";
static char errgrp[]="DCGRIB";

char *gproj;
static char cedproj[]="CED";
static char merproj[]="MER";
static char lccproj[]="LCC";
static char strproj[]="STR";

if(strcmp(filnam,oldfil) != 0)
   {
   if(*iflno != -1)
      {
      gd_clos(iflno,&ier);
      loglev = 1;
      numerr = ier;
      sprintf(errstr,"closing %s %d\0",oldfil,ier);
      dc_wclg(loglev,errgrp,numerr,errstr,&ier);
      *iflno = -1;
      }
   strcpy(oldfil,filnam);
   }
   

if(*iflno == -1)
   {

   /* make sure directories to file exist */
   if((dirp = strrchr(filnam, '/'))!= NULL) /* a directory path is used */
      {
      dirlen = dirp - filnam;
      if(dirlen >= PATH_MAX)
         {
         serror("name too long %s",filnam);
         exit(1);
         }
      memcpy(stripped, filnam, dirlen);
      stripped[dirlen] = '\0';
      mkdirs(stripped, (dirmode | 0111));
      }

   if (diraccess(filnam,  (R_OK | W_OK), !0) == -1) 
      {
      serror("can't access directories leading to %s", filnam);
      exit(1);
      }

   if(specgrid != 0)
      {
      gproj = gtype[sgridval].proj;
      lat1 = gtype[sgridval].gar[0];
      lon1 = gtype[sgridval].gar[1];
      lat2 = gtype[sgridval].gar[2];
      lon2 = gtype[sgridval].gar[3];
      ang1 = gtype[sgridval].ang[0];
      ang2 = gtype[sgridval].ang[1];
      ang3 = gtype[sgridval].ang[2];
      nx = gtype[sgridval].nx;
      ny = gtype[sgridval].ny;
      }
   else
      {
      switch(gds.grid_proj)
         {
         case 0:
            gproj = cedproj;
            break;
         case 1:
            gproj = merproj;
            break;
         case 3:
            gproj = lccproj;
            break;
         case 5:
            gproj = strproj;
            break;
	 case 203:
	    gproj = cedproj;
	    break;
         default:
            loglev = 0;
            numerr = 3;
            sprintf(errstr,"unknown projection %d\0",gds.grid_proj);
            dc_wclg(loglev,errgrp,numerr,errstr,&ier);
            return;
         }
      lon1 = gds.lonll;
      lat1 = gds.latll;
      lon2 = gds.lonur;
      lat2 = gds.latur;
      ang1 = gds.angle1;
      ang2 = gds.angle2;
      ang3 = gds.angle3;
      nx = gds.kx;
      ny = gds.ky;
      }

   if(strncmp(gproj,"CED",3) == 0)
      {
      if((ang1 != 0)&&(ang2 != 0))
         angflg = TRUE;
      else
         angflg = FALSE;
      }
   else
      angflg = TRUE;

   gr_mnav(gproj,&nx,&ny,&lat1,&lon1,&lat2,&lon2,&ang1,&ang2,&ang3,
           &angflg, rnvblk, &ier,strlen(gproj));
   fl_inqr(filnam,&exist,newfil,&ier,strlen(filnam),sizeof(newfil));

   if(!exist)
      {
      navsz = 256;
      anlsz = 128;
      hdrsz = 2;
      for(i=0;i<anlsz;i++) anlblk[i] = 0.0;
      gd_cref(filnam,&navsz,rnvblk,&anlsz,anlblk,&hdrsz,&maxgrid,iflno,&ier,
              strlen(filnam));
      if(ier < 0)
         {
         loglev = 0;
         numerr = 2;
         sprintf(errstr,"Error creating file [%d]: %s\n",
            ier,filnam);
         dc_wclg(loglev,errgrp,numerr,errstr,&ier);
         *iflno = -1;
         return;
         }
      }
   else
      {
      gd_opnr(filnam,iflno,&navsz,envblk,&anlsz,anlblk,&hdrsz,&imax,&ier,
         strlen(filnam));
      gr_cnav(rnvblk,envblk,&navsz,&gsflag,&ier);
      if(!gsflag)
         {
         gd_clos(iflno,&ier);
         *iflno = -1;
         loglev = 0;
         numerr = 1;
         sprintf(errstr,"Grid navigation %d incompatible with file %s\0",
            pds.grid_id,filnam);
         dc_wclg(loglev,errgrp,numerr,errstr,&ier);
         return;
         }
      }


   loglev = 1;
   numerr = 0;
   sprintf(errstr,"Opened %s model:%d grid:%d\0",filnam,pds.process,pds.grid_id);
   dc_wclg(loglev,errgrp,numerr,errstr,&ier);

   }
}
